
<!DOCTYPE html>
<html lang="en"  ng-app="login">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Data visualization</title>

    <!-- Bootstrap core CSS -->
    <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="../css/signin.css" rel="stylesheet">
   
    
    
  </head>

  <body>
	<div class = "row"> 
	<div id="includedContent" class="col-md-5  container" style="float:left"> 
	 <div>
<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>
<script type="text/javascript" src="../libs/three.min.js"></script>
<script type="text/javascript" src="../libs/d3Force3d.js"></script>
<script type="text/javascript" src="../libs/jquery.js"></script>
<div id="canvas-svg" style="width:50%"></div>
<script type="text/javascript">

var svg = d3.select("#canvas-svg");

var WIDTH = 600, HEIGHT = 500;

var COLOR = "#4682B4";
var LINK_COLOR = "#cccccc";

var scene = new THREE.Scene();

// set some camera attributes
var VIEW_ANGLE = 45,
  ASPECT = WIDTH / HEIGHT,
  NEAR = 0.1,
  FAR = 10000;

// get the DOM element to attach to
// - assume we've got jQuery to hand
var $container = $('#canvas-svg');

// create a WebGL renderer, camera
// and a scene
var renderer = new THREE.WebGLRenderer({alpha: true,
              antialiasing: true});

renderer.setClearColor( 0x000000, 0 );

var camera =
  new THREE.PerspectiveCamera(
    VIEW_ANGLE,
    ASPECT,
    NEAR,
    FAR);

var scene = new THREE.Scene();

var data = {
  "nodes": [
    {
      "x": 469,
      "y": 410
    },
    {
      "x": 493,
      "y": 364
    },
    {
      "x": 442,
      "y": 365
    },
    {
      "x": 467,
      "y": 314
    },
    {
      "x": 477,
      "y": 248
    },
    {
      "x": 425,
      "y": 207
    },
    {
      "x": 402,
      "y": 155
    },
    {
      "x": 369,
      "y": 196
    },
    {
      "x": 350,
      "y": 148
    },
    {
      "x": 539,
      "y": 222
    },
    {
      "x": 594,
      "y": 235
    },
    {
      "x": 582,
      "y": 185
    },
    {
      "x": 633,
      "y": 200
    }
  ],
  "links": [
    {
      "source": 0,
      "target": 1
    },
    {
      "source": 1,
      "target": 2
    },
    {
      "source": 2,
      "target": 0
    },
    {
      "source": 1,
      "target": 3
    },
    {
      "source": 3,
      "target": 2
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 7
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 6,
      "target": 8
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 9,
      "target": 4
    },
    {
      "source": 9,
      "target": 11
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 10
    }
  ]
};

// add the camera to the scene
scene.add(camera);

// the camera starts at 0,0,0
// so pull it back
camera.position.z = 300;

// start the renderer
renderer.setSize(WIDTH, HEIGHT);

// attach the render-supplied DOM element
$container.append(renderer.domElement);

var spheres = [], three_links = [];

// Define the 3d force
var force = d3.layout.force3d()
    .nodes(sort_data=[])
    .links(links=[])
    .size([50, 50])
    .gravity(0.3)
    .charge(-400)

var DISTANCE = 1

for (var i = 0; i < data.nodes.length; i++) {
  sort_data.push({x:data.nodes.x + DISTANCE,y:data.nodes.y + DISTANCE,z:0})
  
  // set up the sphere vars
  var radius = 5,
      segments = 16,
      rings = 16;
  
  // create the sphere's material
  var sphereMaterial = new THREE.MeshLambertMaterial(
      {
        color: COLOR
      });
  
  var sphere = new THREE.Mesh(
    new THREE.SphereGeometry(
      radius,
      segments,
      rings),
    sphereMaterial);
  
  spheres.push(sphere);
  
  // add the sphere to the scene
  scene.add(sphere);
}

for (var i = 0; i < data.links.length; i++) {
  links.push({target:sort_data[data.links[i].target],source:sort_data[data.links[i].source]});
  
  var material = new THREE.LineBasicMaterial({ color: LINK_COLOR,
                linewidth: 2}); 
  var geometry = new THREE.Geometry();
  
  geometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );
  geometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );
  var line = new THREE.Line( geometry, material );
  line.userData = { source: data.links[i].source,
                    target: data.links[i].target };
  three_links.push(line);
  scene.add(line);
  
  force.start();
}

// set up the axes
var x = d3.scale.linear().domain([0, 350]).range([0, 10]),
    y = d3.scale.linear().domain([0, 350]).range([0, 10]),
    z = d3.scale.linear().domain([0, 350]).range([0, 10]);

force.on("tick", function(e) {
  for (var i = 0; i < sort_data.length; i++) {
    spheres[i].position.set(x(sort_data[i].x) * 40 - 40, y(sort_data[i].y) * 40 - 40,0);
    
    for (var j = 0; j < three_links.length; j++) {
      var line = three_links[j];
      var vi = -1;
      if (line.userData.source === i) {
        vi = 0;
      }
      if (line.userData.target === i) {
        vi = 1;
      }
      
      if (vi >= 0) {
        line.geometry.vertices[vi].x = x(sort_data[i].x) * 40 - 40;
        line.geometry.vertices[vi].y = y(sort_data[i].y) * 40 - 40;
        line.geometry.verticesNeedUpdate = true;
      }
    }
  }
  
  renderer.render(scene, camera);
});

// create a point light
var pointLight = new THREE.PointLight( 0xFFFFFF );

// set its position
pointLight.position.x = 10;
pointLight.position.y = 50;
pointLight.position.z = 130;

// add to the scene
scene.add(pointLight);

var rotSpeed = 0.05;
function checkRotation(){

    var x = camera.position.x,
        y = camera.position.y,
        z = camera.position.z;

    camera.position.x = x * Math.cos(rotSpeed) - z * Math.sin(rotSpeed);
    camera.position.z = z * Math.cos(rotSpeed) + x * Math.sin(rotSpeed);
    
    camera.lookAt(scene.position);
    
}

function animate() {
    requestAnimationFrame(animate);
    
    checkRotation();
    
    renderer.render(scene, camera);
}

animate();

</script>
</div>
    </div>	
    <div class="col-md-6 container" style="float:right">
      <form class="form-signin" role="form">
        <h2 class="form-signin-heading">Log in</h2>
        <input type="email" class="form-control" placeholder="Email address" required autofocus>
        <input type="password" class="form-control" placeholder="Password" required>
        <label class="checkbox">
          <input type="checkbox" value="remember-me"> Remember me 
        </label>
        <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
		<button class="btn btn-lg btn-success btn-block" data-toggle="modal" data-target="#register">New user</button>
      </form>

    </div> <!-- /container -->
	</div>
	<!-- Modal for new User-->
<div class="modal fade" id="register" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
		<h2 class="modal-title" id="myModalLabel">Please Sign Up <small>It's free and always will be.</small></h2>
      </div>
      <div class="modal-body">

        <div class="row">
		 <div class="col-xs-1 col-sm-1 col-md-1 ">
		 </div>
    <div class="col-xs-10 col-sm-6 col-md-10 ">
		<form role="form">
			<hr class="colorgraph">
			<div class="row">
			
				<div class="col-xs-12 col-sm-6 col-md-6">
					<div class="form-group">
                        <input type="text" name="first_name" id="first_name" class="form-control input-lg" placeholder="First Name" tabindex="1">
					</div>
				</div>
				<div class="col-xs-12 col-sm-6 col-md-6">
					<div class="form-group">
						<input type="text" name="last_name" id="last_name" class="form-control input-lg" placeholder="Last Name" tabindex="2">
					</div>
				</div>
			</div>
			<div class="form-group">
				<input type="text" name="display_name" id="display_name" class="form-control input-lg" placeholder="Display Name" tabindex="3">
			</div>
			<div class="form-group">
				<input type="email" name="email" id="email" class="form-control input-lg" placeholder="Email Address" tabindex="4">
			</div>
			<div class="row">
				<div class="col-xs-12 col-sm-6 col-md-6">
					<div class="form-group">
						<input type="password" name="password" id="password" class="form-control input-lg" placeholder="Password" tabindex="5">
					</div>
				</div>
				<div class="col-xs-12 col-sm-6 col-md-6">
					<div class="form-group">
						<input type="password" name="password_confirmation" id="password_confirmation" class="form-control input-lg" placeholder="Confirm Password" tabindex="6">
					</div>
				</div>
			</div>
			<hr class="colorgraph">
			<div class="row">
				<div class="col-xs-12 col-md-6"><input type="submit" value="Register" class="btn btn-primary btn-block btn-lg" tabindex="7"></div>
				<div class="col-xs-12 col-md-6"><a href="#" class="btn btn-success btn-block btn-lg">Sign In</a></div>
			</div>
		</form>
	</div>
</div>
      </div>
      <div class="modal-footer">
       
      </div>
    </div>
  </div>
</div>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" ></script>
	<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
	<script src="../libs/custom/app.js"></script>
	<script src="../libs/custom/register.js"></script>
  </body>
</html>
